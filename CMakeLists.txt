cmake_minimum_required(VERSION 3.12)
if(SET_ONED STREQUAL TRUE)
    add_definitions(-DONED)
elseif(SET_TWOD STREQUAL TRUE)
    add_definitions(-DTWOD)
elseif(SET_THREED STREQUAL TRUE)
    add_definitions(-DTHREED)
endif()
if(SET_GPU STREQUAL TRUE)
    option(BUILD_CUDA "Build with CUDA support" ON)
    add_definitions(-DGPU)
else()
    option(BUILD_CUDA "Build with CUDA support" OFF)
endif()
if(BUILD_CUDA)
    project(ALEBGK LANGUAGES CUDA CXX)
else()
    project(ALEBGK LANGUAGES CXX)
endif()

# Find the CUDA Toolkit
if(HOMEDIR STREQUAL PANCH)
    set(HOME_DIRECTORY $ENV{HOME})
#elseif(HOMEDIR STREQUAL KLAAS)
#    set(HOME_DIRECTORY $ENV{HOME}/Documents/codes/BGKParallelCode)
#elseif(HOMEDIR STREQUAL RHRK)
#    set(HOME_DIRECTORY $ENV{HOME}/GPU)
endif()
list(APPEND CMAKE_PREFIX_PATH "${HOME_DIRECTORY}/Installer/")
#set(Protobuf_DIR "/home/panch.m/Installer/lib/protobuf/")
#find_package(Protobuf REQUIRED)
# Set C++ standard (e.g., C++11)
if(BUILD_CUDA)
    find_package(CUDAToolkit REQUIRED)
    find_package(CUDA REQUIRED)
#    if(HOMEDIR STREQUAL RHRK)
#    	set(CMAKE_CUDA_ARCHITECTURES "sm_70" CACHE STRING "" FORCE)
#    	set(CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS};-arch=sm_70)
    #    set(LINK_DIRS "/cm/shared/apps/cuda11.2/toolkit/11.2.2/include")
#    	set(LINK_DIRS "/software/nvidia/12.2.1/include")
#    else
    if(HOMEDIR STREQUAL PANCH)
	set(CMAKE_CUDA_ARCHITECTURES "sm_61" CACHE STRING "" FORCE)
    	set(CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS};-arch=sm_61)
	set(LINK_DIRS "/cm/shared/apps/cuda11.2/toolkit/11.2.2/include")
    endif()
endif()
# set(CMAKE_CXX_STANDARD 11)
# set(CMAKE_CXX_STANDARD_REQUIRED ON)
#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pg")
#set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -pg")
#set(CMAKE_BUILD_TYPE Debug)


#protobuf_generate_cpp(PROTO_SRCS PROTO_HDRS example.proto)
#add_library(myprotobuf ${PROTO_SRCS} ${PROTO_HDRS} ${PROTO_FILE_PATH})


# add_subdirectory(definitions)
# add_subdirectory(parameters)
# add_subdirectory(include)
# add_subdirectory(io)
# add_subdirectory(userfiles)
# add_subdirectory(savedata)
# add_subdirectory(neighboursearch)
# add_subdirectory(MLSMatrix)
# add_subdirectory(Interpolation)

# Add executable target
find_package(Eigen3 3.3 REQUIRED NO_MODULE)

set(SOURCE_FILES main.cpp)
add_executable(ALEBGK ${SOURCE_FILES})
#target_link_libraries(${PROJECT_NAME} stdc++fs)

# Optionally, you can include additional directories or libraries here.
# For example, if using a library named "examplelib":
if(BUILD_CUDA)
    set_source_files_properties(main.cpp PROPERTIES LANGUAGE CUDA)
    message(STATUS "Hello, this is a message from CMake! ${CUDA_INCLUDE_DIRS}") 
    target_include_directories(ALEBGK PRIVATE "${HOME_DIRECTORY}/Installer/include" ${CUDA_INCLUDE_DIRS})
#    if(HOMEDIR STREQUAL RHRK)
#        target_compile_options(ALEBGK PRIVATE $<$<COMPILE_LANGUAGE:CUDA>:-gencode arch=compute_70,code=sm_70>)
#    else
    if(HOMEDIR STREQUAL PANCH)
    	target_compile_options(ALEBGK PRIVATE $<$<COMPILE_LANGUAGE:CUDA>:-gencode arch=compute_61,code=sm_61>)
        target_compile_options(ALEBGK PRIVATE "--expt-relaxed-constexpr")
    endif()
else()
    message(STATUS "The Following Directory is included! ${HOME_DIRECTORY}/Installer/include") 
    target_include_directories(ALEBGK PRIVATE "${HOME_DIRECTORY}/Installer/include")
    target_link_libraries(ALEBGK Eigen3::Eigen)
endif()


#target_link_libraries(ALEBGK PRIVATE ALEBGK.so)

#target_link_libraries(ALEBGK myprotobuf ${PROTOBUF_LIBRARY})
if(BUILD_CUDA)
    set_property(TARGET ALEBGK PROPERTY CUDA_ARCHITECTURES OFF)
    target_link_libraries(ALEBGK PRIVATE ${CUDA_LIBRARIES})
    set_target_properties(ALEBGK PROPERTIES CUDA_SEPARABLE_COMPILATION ON)
    target_link_libraries(ALEBGK PRIVATE CUDA::cudart)
    target_link_libraries(ALEBGK PRIVATE Eigen3::Eigen)
endif()

# Install targets
if(BUILD_CUDA)
set_target_properties( ALEBGK PROPERTIES OUTPUT_NAME "ALEBGK" ) 
install(TARGETS ALEBGK RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX}/bin)
install(TARGETS ALEBGK RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX}/lib)
else()
set_target_properties( ALEBGK PROPERTIES OUTPUT_NAME "ALEBGKCPU" ) 
install(TARGETS ALEBGK RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX}/bin)
install(TARGETS ALEBGK RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX}/lib)
endif()
#install(FILES ${PROTO_HDRS} DESTINATION ${CMAKE_INSTALL_PREFIX}/include)

enable_testing()
